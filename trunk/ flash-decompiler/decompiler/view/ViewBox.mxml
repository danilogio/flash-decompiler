<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" width="100%" height="100%" creationComplete="initializeApp()" xmlns:view="com.ludicast.decompiler.view.*">
			<mx:Script>
		<![CDATA[
			import com.ludicast.decompiler.util.ByteCodePrinter;
			import com.ludicast.decompiler.vo.Tag;
			import mx.core.UITextField;
			import mx.core.Container;
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.ludicast.decompiler.controller.DecompilerController;
			import com.ludicast.decompiler.model.DecompilerModelLocator;
			
			[Bindable]
			protected var model:DecompilerModelLocator;
			protected var controller:DecompilerController;
			
			protected function initializeApp():void {
				model = DecompilerModelLocator.getInstance();
				controller = DecompilerController.getInstance();	
			}

			protected function loadRemoteSWF():void {
				var evt:CairngormEvent = new CairngormEvent(DecompilerController.LOAD_REMOTE_SWF);
				evt.data = urlInfo.text;
				evt.dispatch();
			}

			protected function browseLocalSWF():void {

				var file:File = new File();
				file.addEventListener(Event.SELECT, fileSelect);
				var swfFilter:FileFilter = new FileFilter("*.swf","*.swf");
				file.browse([swfFilter]);
			}			
			
			public function fileSelect(event:Event):void {
				var file:File = event.target as File;

				var evt:CairngormEvent = new CairngormEvent(DecompilerController.LOAD_LOCAL_SWF);
				trace ("found file" + file);
				evt.data = file;
				evt.dispatch();	
			}
			
			public function selectBox(state:String):Container {
				if (state == DecompilerModelLocator.PARSED_STATE) {
					trace ("showing info box");
					//dataText.text = model.dataString; //barfing on binding for some reason
					//trace (model.dataString);
					return showInfoBox;
				} else {
					trace ("showing information");
					stateText.text = getStateLabel(state);
					return informationBox;
				}
			}

			public function getStateLabel(state:String):String {
				switch (state) {
					case DecompilerModelLocator.ERROR_STATE:
						return "Error loading or parsing SWF";
					case DecompilerModelLocator.PARSING_STATE:
						trace ("returned parsing state!");
						return "Parsing SWF";
					case DecompilerModelLocator.LOADING_STATE:
						return "Loading SWF";
					case DecompilerModelLocator.WAITING_STATE:
						return "Enter name of SWF to analyze";
					case DecompilerModelLocator.PARSED_STATE:
						return "Should not appear...";
					default:
						return "Unspecified State";
				}
			}
			
			protected function switchLocalRemote():void {
				if (localCheckbox.selected) {
					localRemoteBox.selectedChild = localBox;
				} else {
					localRemoteBox.selectedChild = remoteBox;
				}
			}	
			

		]]>
	</mx:Script>

	<mx:HBox width="100%" verticalAlign="middle">
		<mx:CheckBox label="Use Local File" id="localCheckbox" change="switchLocalRemote()" />
		<mx:ViewStack width="100%" id="localRemoteBox">
			<mx:HBox id="remoteBox" verticalAlign="middle">
				<mx:Label text="URL of SWF" /><mx:TextInput id="urlInfo" width="100%" /><mx:Button click="loadRemoteSWF()" label="Load Remote SWF" />	
			</mx:HBox>		
			<mx:HBox id="localBox" verticalAlign="middle">
				<mx:Label text="File Name" /><mx:Button click="browseLocalSWF()" label="Load Local SWF..." />
			</mx:HBox>
		</mx:ViewStack>	
	</mx:HBox>
	<mx:ViewStack creationPolicy="all" selectedChild="{selectBox(model.currentState)}" width="100%" height="100%">
	<mx:HBox id="informationBox" width="100%" height="100%" verticalAlign="middle">
		<mx:Label textAlign="center" width="100%" id="stateText" />
	</mx:HBox>

	<mx:TabNavigator id="showInfoBox" width="100%" height="100%" >

		<mx:VBox width="100%" height="100%" label="Header Section">
			<mx:Form>
				<mx:FormItem label="Compressed:">
					<mx:Label text="{model.swfProps.compressed ? 'Yes' : 'No'}" />
				</mx:FormItem>
				<mx:FormItem label="Version:">
					<mx:Label text="{model.swfProps.version}" />
				</mx:FormItem>
				<mx:FormItem label="Length:">
					<mx:Label text="{model.swfProps.fileLength}" />
				</mx:FormItem>
				<mx:FormItem label="Width">
					<mx:Label text="{model.swfProps.width}" />
				</mx:FormItem>
				<mx:FormItem label="Height:">
					<mx:Label text="{model.swfProps.height}" />
				</mx:FormItem>				
				<mx:FormItem label="Frame Rate:">
					<mx:Label text="{model.swfProps.frameRate}" />
				</mx:FormItem>
				<mx:FormItem label="Frame Count:">
					<mx:Label text="{model.swfProps.frameCount}" />
				</mx:FormItem>			
			</mx:Form>		
		</mx:VBox>
		<view:TagDisplay width="100%" height="100%" label="tags"/>
	</mx:TabNavigator>


		
	</mx:ViewStack>
</mx:VBox>
